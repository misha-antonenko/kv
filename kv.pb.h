// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kv_2eproto;
namespace NProto {
class TGetRequest;
struct TGetRequestDefaultTypeInternal;
extern TGetRequestDefaultTypeInternal _TGetRequest_default_instance_;
class TGetResponse;
struct TGetResponseDefaultTypeInternal;
extern TGetResponseDefaultTypeInternal _TGetResponse_default_instance_;
class TLog;
struct TLogDefaultTypeInternal;
extern TLogDefaultTypeInternal _TLog_default_instance_;
class TLog_TLogEntry;
struct TLog_TLogEntryDefaultTypeInternal;
extern TLog_TLogEntryDefaultTypeInternal _TLog_TLogEntry_default_instance_;
class TPutRequest;
struct TPutRequestDefaultTypeInternal;
extern TPutRequestDefaultTypeInternal _TPutRequest_default_instance_;
class TPutResponse;
struct TPutResponseDefaultTypeInternal;
extern TPutResponseDefaultTypeInternal _TPutResponse_default_instance_;
}  // namespace NProto
PROTOBUF_NAMESPACE_OPEN
template<> ::NProto::TGetRequest* Arena::CreateMaybeMessage<::NProto::TGetRequest>(Arena*);
template<> ::NProto::TGetResponse* Arena::CreateMaybeMessage<::NProto::TGetResponse>(Arena*);
template<> ::NProto::TLog* Arena::CreateMaybeMessage<::NProto::TLog>(Arena*);
template<> ::NProto::TLog_TLogEntry* Arena::CreateMaybeMessage<::NProto::TLog_TLogEntry>(Arena*);
template<> ::NProto::TPutRequest* Arena::CreateMaybeMessage<::NProto::TPutRequest>(Arena*);
template<> ::NProto::TPutResponse* Arena::CreateMaybeMessage<::NProto::TPutResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NProto {

// ===================================================================

class TPutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NProto.TPutRequest) */ {
 public:
  inline TPutRequest() : TPutRequest(nullptr) {}
  ~TPutRequest() override;
  explicit constexpr TPutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPutRequest(const TPutRequest& from);
  TPutRequest(TPutRequest&& from) noexcept
    : TPutRequest() {
    *this = ::std::move(from);
  }

  inline TPutRequest& operator=(const TPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPutRequest& operator=(TPutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPutRequest* internal_default_instance() {
    return reinterpret_cast<const TPutRequest*>(
               &_TPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TPutRequest& a, TPutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TPutRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPutRequest* New() const final {
    return new TPutRequest();
  }

  TPutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TPutRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NProto.TPutRequest";
  }
  protected:
  explicit TPutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kRequestIdFieldNumber = 1,
    kOffsetFieldNumber = 3,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NProto.TPutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class TPutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NProto.TPutResponse) */ {
 public:
  inline TPutResponse() : TPutResponse(nullptr) {}
  ~TPutResponse() override;
  explicit constexpr TPutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPutResponse(const TPutResponse& from);
  TPutResponse(TPutResponse&& from) noexcept
    : TPutResponse() {
    *this = ::std::move(from);
  }

  inline TPutResponse& operator=(const TPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPutResponse& operator=(TPutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPutResponse* internal_default_instance() {
    return reinterpret_cast<const TPutResponse*>(
               &_TPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TPutResponse& a, TPutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TPutResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPutResponse* New() const final {
    return new TPutResponse();
  }

  TPutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TPutResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NProto.TPutResponse";
  }
  protected:
  explicit TPutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NProto.TPutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class TGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NProto.TGetRequest) */ {
 public:
  inline TGetRequest() : TGetRequest(nullptr) {}
  ~TGetRequest() override;
  explicit constexpr TGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TGetRequest(const TGetRequest& from);
  TGetRequest(TGetRequest&& from) noexcept
    : TGetRequest() {
    *this = ::std::move(from);
  }

  inline TGetRequest& operator=(const TGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGetRequest& operator=(TGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TGetRequest* internal_default_instance() {
    return reinterpret_cast<const TGetRequest*>(
               &_TGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TGetRequest& a, TGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TGetRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGetRequest* New() const final {
    return new TGetRequest();
  }

  TGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TGetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NProto.TGetRequest";
  }
  protected:
  explicit TGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NProto.TGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class TGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NProto.TGetResponse) */ {
 public:
  inline TGetResponse() : TGetResponse(nullptr) {}
  ~TGetResponse() override;
  explicit constexpr TGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TGetResponse(const TGetResponse& from);
  TGetResponse(TGetResponse&& from) noexcept
    : TGetResponse() {
    *this = ::std::move(from);
  }

  inline TGetResponse& operator=(const TGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGetResponse& operator=(TGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TGetResponse* internal_default_instance() {
    return reinterpret_cast<const TGetResponse*>(
               &_TGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TGetResponse& a, TGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TGetResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGetResponse* New() const final {
    return new TGetResponse();
  }

  TGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TGetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NProto.TGetResponse";
  }
  protected:
  explicit TGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // uint64 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NProto.TGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class TLog_TLogEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NProto.TLog.TLogEntry) */ {
 public:
  inline TLog_TLogEntry() : TLog_TLogEntry(nullptr) {}
  ~TLog_TLogEntry() override;
  explicit constexpr TLog_TLogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLog_TLogEntry(const TLog_TLogEntry& from);
  TLog_TLogEntry(TLog_TLogEntry&& from) noexcept
    : TLog_TLogEntry() {
    *this = ::std::move(from);
  }

  inline TLog_TLogEntry& operator=(const TLog_TLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLog_TLogEntry& operator=(TLog_TLogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLog_TLogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLog_TLogEntry* internal_default_instance() {
    return reinterpret_cast<const TLog_TLogEntry*>(
               &_TLog_TLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TLog_TLogEntry& a, TLog_TLogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TLog_TLogEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLog_TLogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLog_TLogEntry* New() const final {
    return new TLog_TLogEntry();
  }

  TLog_TLogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLog_TLogEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLog_TLogEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TLog_TLogEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLog_TLogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NProto.TLog.TLogEntry";
  }
  protected:
  explicit TLog_TLogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint64 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NProto.TLog.TLogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class TLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NProto.TLog) */ {
 public:
  inline TLog() : TLog(nullptr) {}
  ~TLog() override;
  explicit constexpr TLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLog(const TLog& from);
  TLog(TLog&& from) noexcept
    : TLog() {
    *this = ::std::move(from);
  }

  inline TLog& operator=(const TLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLog& operator=(TLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLog* internal_default_instance() {
    return reinterpret_cast<const TLog*>(
               &_TLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TLog& a, TLog& b) {
    a.Swap(&b);
  }
  inline void Swap(TLog* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLog* New() const final {
    return new TLog();
  }

  TLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TLog& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NProto.TLog";
  }
  protected:
  explicit TLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLog_TLogEntry TLogEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .NProto.TLog.TLogEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::NProto::TLog_TLogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NProto::TLog_TLogEntry >*
      mutable_entries();
  private:
  const ::NProto::TLog_TLogEntry& _internal_entries(int index) const;
  ::NProto::TLog_TLogEntry* _internal_add_entries();
  public:
  const ::NProto::TLog_TLogEntry& entries(int index) const;
  ::NProto::TLog_TLogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NProto::TLog_TLogEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:NProto.TLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NProto::TLog_TLogEntry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TPutRequest

// uint64 request_id = 1;
inline void TPutRequest::clear_request_id() {
  request_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TPutRequest::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TPutRequest::request_id() const {
  // @@protoc_insertion_point(field_get:NProto.TPutRequest.request_id)
  return _internal_request_id();
}
inline void TPutRequest::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void TPutRequest::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:NProto.TPutRequest.request_id)
}

// string key = 2;
inline void TPutRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& TPutRequest::key() const {
  // @@protoc_insertion_point(field_get:NProto.TPutRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TPutRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NProto.TPutRequest.key)
}
inline std::string* TPutRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:NProto.TPutRequest.key)
  return _s;
}
inline const std::string& TPutRequest::_internal_key() const {
  return key_.Get();
}
inline void TPutRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TPutRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TPutRequest::release_key() {
  // @@protoc_insertion_point(field_release:NProto.TPutRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TPutRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:NProto.TPutRequest.key)
}

// uint64 offset = 3;
inline void TPutRequest::clear_offset() {
  offset_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TPutRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TPutRequest::offset() const {
  // @@protoc_insertion_point(field_get:NProto.TPutRequest.offset)
  return _internal_offset();
}
inline void TPutRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void TPutRequest::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:NProto.TPutRequest.offset)
}

// -------------------------------------------------------------------

// TPutResponse

// uint64 request_id = 1;
inline void TPutResponse::clear_request_id() {
  request_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TPutResponse::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TPutResponse::request_id() const {
  // @@protoc_insertion_point(field_get:NProto.TPutResponse.request_id)
  return _internal_request_id();
}
inline void TPutResponse::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void TPutResponse::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:NProto.TPutResponse.request_id)
}

// -------------------------------------------------------------------

// TGetRequest

// uint64 request_id = 1;
inline void TGetRequest::clear_request_id() {
  request_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TGetRequest::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TGetRequest::request_id() const {
  // @@protoc_insertion_point(field_get:NProto.TGetRequest.request_id)
  return _internal_request_id();
}
inline void TGetRequest::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void TGetRequest::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:NProto.TGetRequest.request_id)
}

// string key = 2;
inline void TGetRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& TGetRequest::key() const {
  // @@protoc_insertion_point(field_get:NProto.TGetRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TGetRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NProto.TGetRequest.key)
}
inline std::string* TGetRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:NProto.TGetRequest.key)
  return _s;
}
inline const std::string& TGetRequest::_internal_key() const {
  return key_.Get();
}
inline void TGetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TGetRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:NProto.TGetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TGetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:NProto.TGetRequest.key)
}

// -------------------------------------------------------------------

// TGetResponse

// uint64 request_id = 1;
inline void TGetResponse::clear_request_id() {
  request_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TGetResponse::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TGetResponse::request_id() const {
  // @@protoc_insertion_point(field_get:NProto.TGetResponse.request_id)
  return _internal_request_id();
}
inline void TGetResponse::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void TGetResponse::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:NProto.TGetResponse.request_id)
}

// uint64 offset = 2;
inline void TGetResponse::clear_offset() {
  offset_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TGetResponse::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TGetResponse::offset() const {
  // @@protoc_insertion_point(field_get:NProto.TGetResponse.offset)
  return _internal_offset();
}
inline void TGetResponse::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void TGetResponse::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:NProto.TGetResponse.offset)
}

// -------------------------------------------------------------------

// TLog_TLogEntry

// string key = 1;
inline void TLog_TLogEntry::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& TLog_TLogEntry::key() const {
  // @@protoc_insertion_point(field_get:NProto.TLog.TLogEntry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TLog_TLogEntry::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NProto.TLog.TLogEntry.key)
}
inline std::string* TLog_TLogEntry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:NProto.TLog.TLogEntry.key)
  return _s;
}
inline const std::string& TLog_TLogEntry::_internal_key() const {
  return key_.Get();
}
inline void TLog_TLogEntry::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TLog_TLogEntry::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TLog_TLogEntry::release_key() {
  // @@protoc_insertion_point(field_release:NProto.TLog.TLogEntry.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TLog_TLogEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:NProto.TLog.TLogEntry.key)
}

// uint64 offset = 2;
inline void TLog_TLogEntry::clear_offset() {
  offset_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TLog_TLogEntry::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TLog_TLogEntry::offset() const {
  // @@protoc_insertion_point(field_get:NProto.TLog.TLogEntry.offset)
  return _internal_offset();
}
inline void TLog_TLogEntry::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void TLog_TLogEntry::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:NProto.TLog.TLogEntry.offset)
}

// -------------------------------------------------------------------

// TLog

// repeated .NProto.TLog.TLogEntry entries = 1;
inline int TLog::_internal_entries_size() const {
  return entries_.size();
}
inline int TLog::entries_size() const {
  return _internal_entries_size();
}
inline void TLog::clear_entries() {
  entries_.Clear();
}
inline ::NProto::TLog_TLogEntry* TLog::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:NProto.TLog.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NProto::TLog_TLogEntry >*
TLog::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:NProto.TLog.entries)
  return &entries_;
}
inline const ::NProto::TLog_TLogEntry& TLog::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::NProto::TLog_TLogEntry& TLog::entries(int index) const {
  // @@protoc_insertion_point(field_get:NProto.TLog.entries)
  return _internal_entries(index);
}
inline ::NProto::TLog_TLogEntry* TLog::_internal_add_entries() {
  return entries_.Add();
}
inline ::NProto::TLog_TLogEntry* TLog::add_entries() {
  ::NProto::TLog_TLogEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:NProto.TLog.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NProto::TLog_TLogEntry >&
TLog::entries() const {
  // @@protoc_insertion_point(field_list:NProto.TLog.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kv_2eproto
